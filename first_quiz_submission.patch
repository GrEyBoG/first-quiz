diff --git a/first_quiz_submission.patch b/first_quiz_submission.patch
new file mode 100644
index 0000000..e69de29
diff --git a/part1/freeze b/part1/freeze
new file mode 100644
index 0000000..e69de29
diff --git a/part1/question1.py b/part1/question1.py
index 5c99fdb..7dce894 100644
--- a/part1/question1.py
+++ b/part1/question1.py
@@ -12,6 +12,7 @@
 # The two functions below are used to tell the weather. They have some bugs that
 # need to be fixed. The test suite in `question1_test.py` will verify the output.
 # Read the test suite to know the values that these functions should return.
+# Aquí está el código corregido para question1.py
 
 def get_city_temperature(city):
    if city == "Quito":
@@ -20,16 +21,30 @@ def get_city_temperature(city):
       return 17
    if city == "San Francisco":
       return 16
+   if city == "New York":
+      return 14  # Se añade la temperatura para New York
 
 def get_city_weather(city):
+   sky_condition = None
 
-  sky_condition = None
+   if city == "Sao Paulo":
+      sky_condition = "cloudy"
+   elif city == "New York":
+      sky_condition = "rainy"
+   elif city == "Quito":
+      sky_condition = "sunny"  # Se añade la condición del cielo para Quito
+
+   temperature = get_city_temperature(city)
+   if temperature is None or sky_condition is None:
+      return "No data available"  # Manejo en caso de que no haya datos disponibles
+   return str(temperature) + " degrees and " + sky_condition
 
-  if city == "Sao Paulo":
-     sky_condition = "cloudy"
-  elif city == "New York":
-     sky_condition = "rainy"
 
-  temperature = get_city_temperature(city)
+#################### Pruebas ####################
+def test_get_city_weather():
+   assert get_city_weather("Quito") == "22 degrees and sunny"
+   print("Test 1 passed")
+   assert get_city_weather("New York") == "14 degrees and rainy"
+   print("Test 2 passed")
 
-  return str(temperature) + " degrees and " + sky_condition
\ No newline at end of file
+# test_get_city_weather()
diff --git a/part1/question2.py b/part1/question2.py
index 34a9b01..ce5806f 100644
--- a/part1/question2.py
+++ b/part1/question2.py
@@ -15,7 +15,30 @@
 # it. As always, there is a test suite that checks the result. It is in 
 # `question2_test.py.`
 
-swapper = None
+# Definimos la función swapper que intercambiará los elementos de una tupla
+def swapper(tup):
+    return (tup[1], tup[0])
+
+swapper_function = swapper
 
 def run_swapper(list_of_tuples):
-  return list(map(swapper, list_of_tuples))
\ No newline at end of file
+    return list(map(swapper_function, list_of_tuples))
+
+# Pruebas
+def test_run_swapper():
+    result1 = run_swapper([("a", "b"), ("c", "d"), ("e", "f")])
+
+    assert result1 == [("b", "a"), ("d", "c"), ("f", "e")], "Test 1 failed."
+
+    print("Test 1 passed. Result:", result1)
+
+
+
+    result2 = run_swapper([(1, 1), ("foo", "bar"), (13, "cows"), (None, "Some")])
+
+    assert result2 == [(1, 1), ("bar", "foo"), ("cows", 13), ("Some", None)], "Test 2 failed."
+
+    print("Test 2 passed. Result:", result2)
+
+
+# test_run_swapper()
diff --git a/part1/question3.py b/part1/question3.py
index 04fab99..5b0ca19 100644
--- a/part1/question3.py
+++ b/part1/question3.py
@@ -26,8 +26,8 @@
 # formulas and their outputs in the test file, `question3_test.py`.
 
 # This function should return an oven instance!
-def make_oven():
-  None
+# def make_oven():
+#   None
 
 def alchemy_combine(oven, ingredients, temperature):
   
@@ -41,4 +41,67 @@ def alchemy_combine(oven, ingredients, temperature):
   else:
     oven.wait()
 
-  return oven.get_output()
\ No newline at end of file
+  return oven.get_output()
+
+
+
+# Actualizaremos la clase Oven para asegurarnos de que no haya impresiones en los métodos
+class Oven:
+    def __init__(self):
+        self.ingredients = []
+        self.temperature = None
+
+    def add(self, item):
+        self.ingredients.append(item)
+
+    def freeze(self):
+        # Asegúrate de que no haya ningún print aquí
+        self.temperature = 'frozen'
+
+    def boil(self):
+        # Asegúrate de que no haya ningún print aquí
+        self.temperature = 'boiling'
+
+    def wait(self):
+        # Asegúrate de que no haya ningún print aquí
+        self.temperature = 'waiting'
+
+    def get_output(self):
+        # Aquí tampoco debería haber prints
+        if self.temperature == 'boiling' and "lead" in self.ingredients and "mercury" in self.ingredients:
+            return "gold"
+        elif self.temperature == 'frozen' and "water" in self.ingredients and "air" in self.ingredients:
+            return "snow"
+        elif self.temperature == 'boiling' and all(ingredient in self.ingredients for ingredient in ["cheese", "dough", "tomato"]):
+            return "pizza"
+        else:
+            return "unknown combination"
+
+# La función make_oven no debería cambiar
+def make_oven():
+    return Oven()
+
+# La función alchemy_combine tampoco debería cambiar
+def alchemy_combine(oven, ingredients, temperature):
+    for item in ingredients:
+        oven.add(item)
+
+    if temperature < 0:
+        oven.freeze()
+    elif temperature >= 100:
+        oven.boil()
+    else:
+        oven.wait()
+
+    return oven.get_output()
+
+# Redefinimos la función de prueba test_alchemy_combine para asegurarnos de que no haya prints
+# def test_alchemy_combine():
+#     assert alchemy_combine(make_oven(), ["lead", "mercury"], 5000) == "gold", "Failed to create gold"
+#     assert alchemy_combine(make_oven(), ["water", "air"], -100) == "snow", "Failed to create snow"
+#     assert alchemy_combine(make_oven(), ["cheese", "dough", "tomato"], 150) == "pizza", "Failed to create pizza"
+#     print("All tests passed successfully.")
+
+# Ejecutamos la función de prueba
+# test_alchemy_combine()
+
diff --git a/part1/question3_test.py b/part1/question3_test.py
index 6cb6c89..745fb15 100644
--- a/part1/question3_test.py
+++ b/part1/question3_test.py
@@ -1,19 +1,18 @@
+from question3 import make_oven, alchemy_combine
+
 def test_alchemy_combine():
+    result = alchemy_combine(make_oven(), ["lead", "mercury"], 5000)
+    print(f"Result for lead + mercury at 5000: {result}")
+    assert result == "gold", f"Expected 'gold', got '{result}'"
+
+    result = alchemy_combine(make_oven(), ["water", "air"], -100)
+    print(f"Result for water + air at -100: {result}")
+    assert result == "snow", f"Expected 'snow', got '{result}'"
 
-  assert alchemy_combine(
-    make_oven(),
-    ["lead", "mercury"],
-    5000
-  ) == "gold"
+    result = alchemy_combine(make_oven(), ["cheese", "dough", "tomato"], 150)
+    print(f"Result for cheese + dough + tomato at 150: {result}")
+    assert result == "pizza", f"Expected 'pizza', got '{result}'"
 
-  assert alchemy_combine(
-    make_oven(),
-    ["water", "air"],
-    -100
-  ) == "snow"
+    print("All tests passed successfully.")
 
-  assert alchemy_combine(
-    make_oven(),
-    ["cheese", "dough", "tomato"],
-    150
-  ) == "pizza"
\ No newline at end of file
+test_alchemy_combine()
\ No newline at end of file
diff --git a/part1/question4.py b/part1/question4.py
index 1e1b2bf..a62a060 100644
--- a/part1/question4.py
+++ b/part1/question4.py
@@ -24,7 +24,10 @@ import pets_db
 
 sql_pets_owned_by_nobody = """
 
-Your SQL here.
+SELECT name, species, age
+FROM animals
+WHERE animal_id NOT IN (SELECT pet_id FROM people_animals);
+
 
 """
 
@@ -34,7 +37,12 @@ Your SQL here.
 
 sql_pets_older_than_owner = """
 
-Your SQL here.
+SELECT COUNT(*)
+FROM animals
+JOIN people_animals ON animals.animal_id = people_animals.pet_id
+JOIN people ON people.person_id = people_animals.owner_id
+WHERE animals.age > people.age;
+
 
 """
 
@@ -43,6 +51,16 @@ Your SQL here.
 # The output should be a list of tuples in the format: (<person name>, <pet name>, <species>)
 sql_only_owned_by_bessie = """ 
 
-Your SQL here.
+SELECT people.name, animals.name, species
+FROM animals
+JOIN people_animals ON animals.animal_id = people_animals.pet_id
+JOIN people ON people.person_id = people_animals.owner_id
+WHERE people.name = 'bessie'
+AND animals.animal_id NOT IN (
+    SELECT pet_id
+    FROM people_animals
+    WHERE owner_id != (SELECT person_id FROM people WHERE name = 'bessie')
+);
+
 
 """
\ No newline at end of file
diff --git a/part1/question4_test.py b/part1/question4_test.py
index b01006c..21dbd83 100644
--- a/part1/question4_test.py
+++ b/part1/question4_test.py
@@ -10,6 +10,7 @@ def test_question4_pets_older_than_owner():
 
   assert len(result) == 1
   assert result[0] == 2
+  print(result)
 
 def test_question4_pets_owned_by_nobody():
   pets_db.create_db()
@@ -23,6 +24,7 @@ def test_question4_pets_owned_by_nobody():
   assert len(rows) == 2
   assert rows[0] == ('petey', 'gray whale', 38)
   assert rows[1] == ('shannon', 'cow', 14)
+  print(rows)
 
 def test_question4_only_owned_by_bessie():
   pets_db.create_db()
@@ -35,4 +37,9 @@ def test_question4_only_owned_by_bessie():
 
   assert len(rows) == 2
   assert rows[0] == ('bessie', 'leyla', 'gray whale')
-  assert rows[1] == ('bessie', 'randolph', 'lemur')
\ No newline at end of file
+  assert rows[1] == ('bessie', 'randolph', 'lemur')
+  print(rows)
+  
+test_question4_pets_owned_by_nobody()
+test_question4_pets_older_than_owner()
+test_question4_only_owned_by_bessie()
\ No newline at end of file
diff --git a/part1/question5.py b/part1/question5.py
index f76654f..5f21ff5 100644
--- a/part1/question5.py
+++ b/part1/question5.py
@@ -20,7 +20,12 @@
 
 sql_create_favorite_foods = """
 
-Your SQL here.
+CREATE TABLE favorite_foods (
+  food_id integer,
+  name text,
+  vegetarian integer
+);
+
 
 """
 
@@ -30,7 +35,9 @@ Your SQL here.
 
 sql_alter_tables_with_favorite_food = """
 
-Your SQL here.
+ALTER TABLE animals ADD COLUMN favorite_food_id integer;
+ALTER TABLE people ADD COLUMN favorite_food_id integer;
+
 
 """
 
@@ -40,6 +47,10 @@ Your SQL here.
 
 sql_select_all_vegetarian_pets = """
 
-Your SQL here.
+SELECT animals.name, favorite_foods.name
+FROM animals
+JOIN favorite_foods ON animals.favorite_food_id = favorite_foods.food_id
+WHERE favorite_foods.vegetarian = 1;
+
 
 """
\ No newline at end of file
diff --git a/part1/question5_test.py b/part1/question5_test.py
index b5d932e..3e30347 100644
--- a/part1/question5_test.py
+++ b/part1/question5_test.py
@@ -27,16 +27,20 @@ ANIMALS_FOOD = [
 
 def insert_foods(con):
   con.executemany("INSERT INTO favorite_foods VALUES(?, ?, ?)", FOODS)
+  print("inserted foods")
 
 def create_favorite_foods(con):
   con.execute(sql_create_favorite_foods)
+  print("created favorite foods")
 
 def alter_people_animals_food(con):
   con.executescript(sql_alter_tables_with_favorite_food);
+  print("altered tables with favorite food")
 
 def update_people_animals_food(con):
   con.executemany("UPDATE people SET favorite_food_id = ? WHERE name = ?", PEOPLE_FOOD)
   con.executemany("UPDATE animals SET favorite_food_id = ? WHERE name = ?", ANIMALS_FOOD)
+  print("updated people and animals with favorite food")
 
 def test_create_favorite_foods():
   pets_db.create_db()
@@ -44,6 +48,7 @@ def test_create_favorite_foods():
   with pets_db.get_connection() as con:
     create_favorite_foods(con)
     insert_foods(con)
+    print("created favorite foods")
     
 def test_alter_tables_with_favorite_food():
   pets_db.create_db()
@@ -53,6 +58,7 @@ def test_alter_tables_with_favorite_food():
     insert_foods(con)
     alter_people_animals_food(con)
     update_people_animals_food(con)
+    print("altered tables with favorite food")
 
 def test_select_all_vegetarian_pets():
   pets_db.create_db()
@@ -65,6 +71,7 @@ def test_select_all_vegetarian_pets():
 
     res = con.execute(sql_select_all_vegetarian_pets)
     rows = res.fetchall()
+    print(rows)
 
   rows.sort()
 
@@ -72,3 +79,11 @@ def test_select_all_vegetarian_pets():
   assert rows[1] == ('martin', 'spinach')
   assert rows[2] == ('ricky', 'cough drops')
   assert rows[3] == ('shannon', 'turnips')
+  print(rows)
+  
+
+test_create_favorite_foods()
+test_alter_tables_with_favorite_food()
+test_select_all_vegetarian_pets()
+
+
diff --git a/part1/quiz_pets b/part1/quiz_pets
new file mode 100644
index 0000000..61a1e07
Binary files /dev/null and b/part1/quiz_pets differ
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java b/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
index 61c1fdd..a8a10be 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
@@ -1,7 +1,19 @@
 package org.velezreyes.quiz.question6;
 
-public interface Drink {
-  public String getName();
+public class Drink {
+    private String name;
+    private boolean isFizzy;
 
-  public boolean isFizzy();
-}
\ No newline at end of file
+    public Drink(String name, boolean isFizzy) {
+        this.name = name;
+        this.isFizzy = isFizzy;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public boolean isFizzy() {
+        return isFizzy;
+    }
+}
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/NotEnoughMoneyException.java b/part2/src/main/java/org/velezreyes/quiz/question6/NotEnoughMoneyException.java
index 8f3bf9d..85cf62a 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/NotEnoughMoneyException.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/NotEnoughMoneyException.java
@@ -1,9 +1,7 @@
 package org.velezreyes.quiz.question6;
 
 public class NotEnoughMoneyException extends Exception {
-
-  public NotEnoughMoneyException() {
-    super("Not enough money inserted.");
-  }
-  
+    public NotEnoughMoneyException(String message) {
+        super(message);
+    }
 }
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/UnknownDrinkException.java b/part2/src/main/java/org/velezreyes/quiz/question6/UnknownDrinkException.java
index 3c26b1e..9fba3f6 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/UnknownDrinkException.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/UnknownDrinkException.java
@@ -1,8 +1,7 @@
 package org.velezreyes.quiz.question6;
 
 public class UnknownDrinkException extends Exception {
-
-  public UnknownDrinkException() {
-    super("Unknown drink!");
-  }
+    public UnknownDrinkException(String message) {
+        super(message);
+    }
 }
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachine.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachine.java
index 3f92825..a09894f 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachine.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachine.java
@@ -1,8 +1,6 @@
 package org.velezreyes.quiz.question6;
 
 public interface VendingMachine {
-
-  public void insertQuarter();
-
-  public Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException;
-}
\ No newline at end of file
+    void insertQuarter();
+    Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException;
+}
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
index 85742c4..b8ff151 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
@@ -1,9 +1,42 @@
 package org.velezreyes.quiz.question6;
 
-public class VendingMachineImpl {
+public class VendingMachineImpl implements VendingMachine {
+    private int balance;
+    private static VendingMachineImpl instance;
 
-  public static VendingMachine getInstance() {
-    // Fix me!
-    return null;
-  }
+    private VendingMachineImpl() {
+        balance = 0;
+    }
+
+    public static VendingMachineImpl getInstance() {
+        if (instance == null) {
+            instance = new VendingMachineImpl();
+        }
+        return instance;
+    }
+
+    @Override
+    public void insertQuarter() {
+        balance += 25;
+    }
+
+    @Override
+    public Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException {
+        switch (name) {
+            case "ScottCola":
+                if (balance < 75) {
+                    throw new NotEnoughMoneyException("Not enough money for ScottCola.");
+                }
+                balance -= 75;
+                return new Drink("ScottCola", true);
+            case "KarenTea":
+                if (balance < 100) {
+                    throw new NotEnoughMoneyException("Not enough money for KarenTea.");
+                }
+                balance -= 100;
+                return new Drink("KarenTea", false);
+            default:
+                throw new UnknownDrinkException("Unknown drink: " + name);
+        }
+    }
 }
